package lab03;

import java.util.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.*;
import java.io.*;

public class Laboratorium {
	private JTextArea danePacjentow;
	private JTextArea wyniki;
	private ArrayList<KartaPacjenta> listaKart;
	private KartaPacjenta biezacaKarta;
	private int indeksBiezacejKarty;
	private JFrame ramka;
	private JButton przyciskNastepnaKarta;
	private boolean czyPrezentowaneWyniki;

	public static void main(String[] args) {
		Laboratorium badania = new Laboratorium();
		badania.doDziela();
	}

	public void doDziela() {
		ramka = new JFrame("Edytor karty pacjenta");
		ramka.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		JPanel panelGlowny = new JPanel();
		Font czcionkaDuza = new Font("sanserif", Font.BOLD, 24);

		danePacjentow = new JTextArea(6, 20);
		danePacjentow.setFont(czcionkaDuza);
		danePacjentow.setLineWrap(true);
		danePacjentow.setEditable(false);

		JScrollPane przewijanieP = new JScrollPane(danePacjentow);
		przewijanieP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		przewijanieP.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

		wyniki = new JTextArea(6, 20);
		wyniki.setLineWrap(true);
		wyniki.setWrapStyleWord(true);
		wyniki.setFont(czcionkaDuza);

		JScrollPane przewijanieW = new JScrollPane(wyniki);
		przewijanieW.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		przewijanieW.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

		przyciskNastepnaKarta = new JButton("Pokaz karte");

		listaKart = new ArrayList<KartaPacjenta>();

		JLabel etykietaP = new JLabel("Dane pacjenta: ");
		JLabel etykietaW = new JLabel("Wyniki badan: ");

		panelGlowny.add(etykietaP);
		panelGlowny.add(przewijanieP);
		panelGlowny.add(etykietaW);
		panelGlowny.add(przewijanieW);
		panelGlowny.add(przyciskNastepnaKarta);
		przyciskNastepnaKarta.addActionListener(new NastepnaKartaListener());

		JMenuBar pasekMenu = new JMenuBar();
		JMenu menuPlik = new JMenu("Plik");
		JMenuItem opcjaNowa = new JMenuItem("Nowy");
		JMenuItem opcjaZapisz = new JMenuItem("Zapisz");
		JMenuItem opcjaOtworz = new JMenuItem("Otwórz zbiór kart");

		opcjaNowa.addActionListener(new NowyMenuListener());
		opcjaZapisz.addActionListener(new ZapiszMenuListener());
		opcjaOtworz.addActionListener(new OtworzMenuListener());
		pasekMenu.add(menuPlik);
		menuPlik.add(opcjaNowa);
		menuPlik.add(opcjaOtworz);
		menuPlik.add(opcjaZapisz);

		ramka.setJMenuBar(pasekMenu);
		ramka.getContentPane().add(BorderLayout.CENTER, panelGlowny);
		ramka.setSize(500, 600);
		ramka.setVisible(true);
	}

	public class NastepnaKartaListener implements ActionListener {
		public void actionPerformed(ActionEvent zd) {

			KartaPacjenta karta = new KartaPacjenta(danePacjentow.getText(), wyniki.getText());
			listaKart.add(karta);
			czyscKarte();

			if (czyPrezentowaneWyniki) {
// pokaz wyniki
				danePacjentow.setText(biezacaKarta.getDane());
				przyciskNastepnaKarta.setText("Nastepna karta");
				czyPrezentowaneWyniki = false;
			} else {
// pokaz nastepną kartę
				if (indeksBiezacejKarty < listaKart.size()) {
					pokazNastepnaKarte();
				} else {
// nie ma wiecej kart
					danePacjentow.setText("To byla ostatnia karta");
					przyciskNastepnaKarta.setEnabled(false);
				}
			}
		}
	}

	public class OtworzMenuListener implements ActionListener {
		public void actionPerformed(ActionEvent ev) {
			JFileChooser dialogFile = new JFileChooser();
			dialogFile.showOpenDialog(ramka);
			wczytajPlik(dialogFile.getSelectedFile());
		}
	}

	public class ZapiszMenuListener implements ActionListener {
		public void actionPerformed(ActionEvent zd) {
			KartaPacjenta karta = new KartaPacjenta(danePacjentow.getText(), wyniki.getText());
			listaKart.add(karta);
			JFileChooser plikDanych = new JFileChooser();
			plikDanych.showSaveDialog(ramka);
			zapiszPlik(plikDanych.getSelectedFile());
		}
	}

	public class NowyMenuListener implements ActionListener {
		public void actionPerformed(ActionEvent zd) {
			listaKart.clear();
			czyscKarte();
		}
	}

	private void czyscKarte() {
		danePacjentow.setText("");
		wyniki.setText("");
		danePacjentow.requestFocus();
	}

	private void zapiszPlik(File plik) {
		try {
			BufferedWriter pisarz = new BufferedWriter(new FileWriter(plik));
			for (KartaPacjenta karta : listaKart) {
				pisarz.write(karta.getDane() + "/");
				pisarz.write(karta.getWyniki() + "\n");
			}
			pisarz.close();
		} catch (IOException e) {
			System.out.println("Nie mozna zapisac pliku kart!");
			e.printStackTrace();
		}
	}

	private void wczytajPlik(File file) {
		listaKart = new ArrayList<KartaPacjenta>();
		try {
			BufferedReader czytelnik = new BufferedReader(new FileReader(file));
			String wiersz = null;
			while ((wiersz = czytelnik.readLine()) != null) {
				tworzKarte(wiersz);
			}
			czytelnik.close();
		} catch (Exception e) {
			System.out.println("Nie mozna odczytac pliku z kartami!");
			e.printStackTrace();
		}

		pokazNastepnaKarte();
	}

	private void tworzKarte(String wierszDanych) {
		String[] wyniki = wierszDanych.split("/");
		KartaPacjenta card = new KartaPacjenta(wierszDanych, wierszDanych);
		listaKart.add(card);
		System.out.println("Utworzono karte");
	}

	private void pokazNastepnaKarte() {
		biezacaKarta = listaKart.get(indeksBiezacejKarty);
		indeksBiezacejKarty++;

		danePacjentow.setText(biezacaKarta.getDane());
		czyPrezentowaneWyniki = true;
	}
}
